#!/bin/bash
# Wrapper around the PRP planner.
# It runs the translator, preprocessor, and search components in sequence.
#
#  Simple example run:
#
#    $ ./src/prp fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl
#
#  To dump the policy found:
#
#   $ ./src/prp  fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl --dump-policy 2
#
#  To set the invariant limit for the translator, use the environment variable INV_TIME_LIMIT:
#
#    $ INV_TIME_LIMIT=10 ./src/prp fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl
#
#  To get the citation information for the planner, use the --citation flag:
#
#    $ ./src/prp --citation
#
#  To run the planner in debug mode, use the debug flag:
#
#    $ ./src/prp debug fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl
#
set -e

# We use REALPATH to allow symbolic links to this script, so that the true basedir is found
REALPATH=$(realpath $0)
BASEDIR="$(dirname "$REALPATH")"
echo "Base dir for PRP: $BASEDIR"

function die {
    echo "$@" 1>&2
    exit 1
}

function usage {
    die "usage: $(basename "$0") [DOMAIN_FILE] PROBLEM_FILE SEARCH_OPTION ..."
}

function examples {
  echo "
  Simple example run:

    $ ./src/prp fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl

  Run and dump the policy found:

   $ ./src/prp  fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl --dump-policy 2

  To set the invariant limit for the translator, use the environment variable INV_TIME_LIMIT:

    $ INV_TIME_LIMIT=10 ./src/prp fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl

  To get the citation information for the planner, use the --citation flag:

    $ ./src/prp --citation

  To run the planner in debug mode, use the debug flag:

    $ ./src/prp debug fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl

  To get options available use -h (also needs domain and problem anyways):

    $ ./src/prp fond-benchmarks/blocksworld/domain.pddl fond-benchmarks/blocksworld/p10.pddl -h
"
}

function citation()
{
  echo "
  @inproceedings{muise12icapsfond,
    author = {Christian Muise and Sheila A McIlraith and J Christopher Beck},
    title = {Improved Non-deterministic Planning by Exploiting State Relevance},
    booktitle = {The 22nd International Conference on Automated Planning and Scheduling (ICAPS)},
    year = {2012},
    subdiscipline = {Artificial Intelligence},
    type = {Conference Proceedings}
  }

  @inproceedings{muise-aaai-14,
    title={Computing Contingent Plans via Fully Observable Non-Deterministic Planning},
    author={Muise, Christian and Belle, Vaishak and McIlraith, Sheila A.},
    booktitle={The 28th AAAI Conference on Artificial Intelligence},
    year={2014},
    url={http://www.haz.ca/papers/muise-aaai-14.pdf}
  }

  @inproceedings{muise-icaps-14,
    title={Non-Deterministic Planning With Conditional Effects},
    author={Muise, Christian and McIlraith, Sheila A. and Belle, Vaishak},
    booktitle={The 24th International Conference on Automated Planning and Scheduling},
    year={2014},
    url={http://www.haz.ca/papers/muise-icaps-14.pdf}
  }
  "
}

# Paths to planner components
TRANSLATE="$BASEDIR/translate/translate.py"
PREPROCESS="$BASEDIR/preprocess/preprocess"
SEARCH="$BASEDIR/search/downward"

# Default invariant time limit (300 is default)
INV_TIME_LIMIT=${INV_TIME_LIMIT:-300}
echo "Using invariant time limit of $INV_TIME_LIMIT seconds."

# Check for citation request (only works if 1st argument)
if [ "--citation" = "$1" ]; then
  citation
  exit 1
fi

if [ "--examples" = "$1" ]; then
  examples
  exit 1
fi


if [ -d "output" ]; then
  die "There is a directory called 'output' that will clash with planner output. Stop execution."
fi


# Need to explicitly ask for GNU time (from MacPorts) on Mac OS X.
if [[ "$(uname)" == "Darwin" ]]; then
    TIME="gtime"
    if ! which $TIME >/dev/null; then
        die "$TIME must be installed on Mac OSX (from MacPorts, perhaps) for this to work"
    fi
else
    # The command command causes the shell to treat the specified command and arguments as a simple command, suppressing shell function lookup.
    # https://www.ibm.com/docs/en/aix/7.1?topic=c-command-command
    TIME="command time"
fi

TIME="$TIME --output=elapsed.time --format=%S\n%U\n"

# must have at least two arguments: PDDL domain + PDDL problem
if [[ "$#" -lt 2 ]]; then
    usage
fi

IPC="ipc"
if [[ "$1" == "debug" ]]; then
    IPC="debug $IPC"
    shift
fi

# extract the domain and problem files
DOMAIN_FILE=$1
PROBLEM_FILE=$2


echo "1. Running translator"
if [[ -e "$2" ]]; then
    echo "Second argument is a file name: use two translator arguments."
    $TIME "$TRANSLATE" "$INV_TIME_LIMIT" "$DOMAIN_FILE" "$PROBLEM_FILE"
    shift 2
else
    echo $2
    echo "Second argument is not a file name: auto-detect domain file."
    $TIME "$TRANSLATE" "$INV_TIME_LIMIT" "$DOMAIN_FILE"
    shift
fi
echo
echo "2. Running preprocessor"
$TIME --append "$PREPROCESS" < output.sas
echo

echo "3. Running search"
echo "$SEARCH" "$IPC" policy-repair < output "$@"
"$SEARCH" $IPC policy-repair < output "$@"
echo


## Report policy size if policy was dumped
POLICY_FILE="$PWD/policy.out"
if [ -f $POLICY_FILE ]; then
   SIZE=$(grep -o "If" policy.out | wc -l)
   echo "Policy size: $SIZE"
else
   echo "File $POLICY_FILE does not exist. Cannot report policy size."
fi
